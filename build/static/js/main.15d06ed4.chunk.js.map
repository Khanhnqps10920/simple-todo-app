{"version":3,"sources":["components/Input.jsx","components/TodoItem.jsx","components/TodoList.jsx","App.js","serviceWorker.js","index.js"],"names":["Input","_this$props","this","props","title","changed","clicked","editItem","react_default","a","createElement","className","value","onChange","type","placeholder","onClick","Component","TodoItem","deleteBtn","editBtn","TodoList","items","map","todo","components_TodoItem","key","id","App","state","uuid","handleChange","e","_this","setState","target","handleSubmit","preventDefault","newItem","console","log","updateTodoList","Object","toConsumableArray","push","clearList","handleDelete","filterItems","filter","handleEdit","selectedItem","find","item","components_Input","components_TodoList","React","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.15d06ed4.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass Input extends Component {\r\n  render() {\r\n\r\n    const { title, changed, clicked, editItem } = this.props;\r\n\r\n    return (\r\n      <div className=\"card card-body my-3\">\r\n        <form>\r\n          <div className=\"input-group\">\r\n            <div className=\"input-group-prepend\">\r\n              <div className=\"input-group-text bg-primary text-white\">\r\n                <i className=\"fas fa-book\"></i>\r\n              </div>\r\n            </div>\r\n            <input\r\n              value={title}\r\n              onChange={changed}\r\n              type=\"text\"\r\n              className=\"form-control text-capitalize\"\r\n              placeholder=\"add a todo item\" />\r\n          </div>\r\n          <button\r\n            onClick={clicked}\r\n            type=\"submit\"\r\n            className={\r\n              editItem ? 'btn btn-block btn-success mt-3'\r\n                : 'btn btn-block btn-primary mt-3'\r\n            }>\r\n            {editItem ? 'edit item' : 'add item'}\r\n          </button>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Input;","import React, { Component } from 'react';\r\n\r\nclass TodoItem extends Component {\r\n  render() {\r\n\r\n    const { title, deleteBtn, editBtn } = this.props\r\n\r\n    return (\r\n      <li className=\"list-group-item text-capitalize d-flex justify-content-between my-2\">\r\n        <h6>{title}</h6>\r\n        <div className=\"todo-icon\">\r\n          <span onClick={editBtn} className=\"mx-2 text-sucess\"><i className=\"fas fa-pen\"></i></span>\r\n          <span onClick={deleteBtn} className=\"mx-2 text-danger\"><i className=\"fas fa-trash\"></i></span>\r\n        </div>\r\n      </li>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TodoItem; ","import React, { Component } from 'react';\r\nimport TodoItem from './TodoItem';\r\n\r\nclass TodoList extends Component {\r\n\r\n  render() {\r\n\r\n    const { items, clicked, deleteBtn, editBtn } = this.props;\r\n\r\n    return (\r\n      <ul className=\"list-group my-5\">\r\n        <h3 className=\"text-capitalize text-center\">Todo list</h3>\r\n        {\r\n          items.map((todo) => {\r\n            return <TodoItem\r\n              key={todo.id}\r\n              title={todo.title}\r\n              deleteBtn={() => deleteBtn(todo.id)}\r\n              editBtn={() => editBtn(todo.id)}\r\n            />\r\n          })\r\n        }\r\n\r\n        <button onClick={clicked} type=\"button\" className=\"btn btn-danger btn-block text-capitalize mt-5\">\r\n          clear list\r\n        </button>\r\n        <h6 className=\"text-center\">create by khánh đẹp zai :3</h6>\r\n      </ul>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TodoList;","import React from 'react';\nimport Input from './components/Input';\nimport TodoList from './components/TodoList';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport uuid from 'uuid';\n\nclass App extends React.Component {\n\n  state = {\n    items: [],\n    id: uuid(),\n    title: '',\n    editItem: false\n  }\n\n  handleChange = (e) => {\n    this.setState({\n      title: e.target.value\n    });\n  }\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n    const newItem = {\n      id: this.state.id,\n      title: this.state.title\n    }\n    console.log(newItem);\n\n    const updateTodoList = [...this.state.items];\n    updateTodoList.push(newItem);\n    this.setState({\n      items: updateTodoList,\n      title: '',\n      id: uuid(),\n      editItem: false,\n    });\n\n  }\n\n  clearList = () => {\n    this.setState({\n      items: [],\n    })\n  }\n\n  handleDelete = (id) => {\n    const items = [...this.state.items];\n\n    const filterItems = items.filter((todo) => {\n      return todo.id !== id;\n    });\n    this.setState({\n      items: filterItems,\n    });\n  }\n\n  handleEdit = (id) => {\n\n    const items = [...this.state.items];\n    const filterItems = items.filter((todo) => {\n      return todo.id !== id;\n    });\n\n    const selectedItem = items.find(item => item.id === id);\n    console.log(selectedItem);\n\n    this.setState({\n      items: filterItems,\n      title: selectedItem.title,\n      editItem: true,\n      id: id\n    });\n\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"col-10 mx-auto col-md-8 mt-4\">\n            <h3 className=\"text-capitalize text-center\">todo input</h3>\n            <Input\n              title={this.state.title}\n              changed={this.handleChange}\n              clicked={this.handleSubmit}\n              editItem={this.state.editItem} />\n            <TodoList\n              clicked={this.clearList}\n              items={this.state.items}\n              deleteBtn={this.handleDelete}\n              editBtn={this.handleEdit} />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}